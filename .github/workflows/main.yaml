name: CI-CD-WORKFLOW
on:
  push:
    branches:
      - main
      - develop
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main

jobs:
  sonar:
    name: Sonar Analyze
    runs-on: ubuntu-latest
    steps:
      - name: Checkout du code
        uses: actions/checkout@v4
      - name: Configuration de Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'
      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=cda-exam_cda-final-project-backend
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs:
      - sonar
    steps:
      - name: Checkout du code
        uses: actions/checkout@v4
      - name: Configuration de Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Lancer les tests unitaires
        run: mvn test
  build:
    name: Build Artifact
    runs-on: ubuntu-latest
    needs:
      - test
    steps:
      - name: Checkout du code
        uses: actions/checkout@v4
      - name: Configuration de Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build le projet Spring Boot
        run: mvn clean package -DskipTests
      - name: Upload Spring Boot artifact
        uses: actions/upload-artifact@v4
        with:
          name: spring-boot-app
          path: target/*.jar
  docker:
    name: Push Docker Image
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Checkout du code
        uses: actions/checkout@v4
      - name: Télécharger l’artefact
        uses: actions/download-artifact@v4
        with:
          name: spring-boot-app
          path: target/
      - name: Build de l’image Docker
        run: |
          docker build --no-cache --rm -t ${{ secrets.DOCKER_USERNAME }}/cda-final-project-backend:${{ github.sha }} .
      - name: Scan Trivy
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: '${{ secrets.DOCKER_USERNAME }}/cda-final-project-backend:${{ github.sha }}'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
      - name: Connexion à Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
      - name: Push de l’image Docker sur Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/cda-final-project-backend:${{ github.sha }}